extends ../../base/main

block variables
  - var pageTitle = 'Observer Pattern'
  - var baseUrlLvl = 1

block styles
  //- link(rel='stylesheet' href= URL_file('pages/tutorials/name', baseUrlLvl))

block content
  h1 Observer Pattern

  textarea.textField
  div Words Count:
    p.countField

block scripts
  script.
    //- Minin
    //- https://www.youtube.com/watch?v=YJVj4XNASDk&t=5166s
    class Subject {
      constructor() {
        this.observers = [] // Events, Objects
      }

      subscribe(observer) {
        this.observers.push(observer)
      }

      unsubscribe(observer) {
        this.observers = this.observers.filter(obs => obs !== observer)
      }

      // Emit
      fire(action) {
        this.observers.forEach(observer => {
          observer.update(action)
        })
      }
    }

    class Observer {
      constructor(state = 1) {
        this.state = state
        this.initialState = state
      }

      update(action) {
        switch (action.type) {
          case 'INCREMENT':
            this.state = ++this.state
            break
          case 'DECTEMENT':
            this.state = --this.state
            break
          case 'ADD':
            this.state += action.payload
            break
          default: this.state = this.initialState
        }
      }
    }

    const stream$ = new Subject()

    const obs1 = new Observer()
    const obs2 = new Observer(42)

    stream$.subscribe(obs1)
    stream$.subscribe(obs2)

    stream$.fire({type : 'INCREMENT'})
    stream$.fire({type : 'INCREMENT'})
    stream$.fire({type : 'ADD', payload: 10})

    //- console.log(obs1.state)
    //- console.log(obs2.state)
    //- console.log(stream$.observers)

    //- https://monsterlessons.com/project/lessons/observer-pattern-v-javascript
    class EventObserver {
      constructor () {
        this.observers = []
      }

      subscribe (fn) {
        this.observers.push(fn)
      }

      unsubscribe (fn) {
        this.observers = this.observers.filter(subscriber => subscriber != fn)
      }

      broadcast(data) {
        this.observers.forEach(subscriber => subscriber (data))
      }
    }
    //- const observer = new EventObserver()
    //- observer.subscribe(data => {
    //-   console.log('subscribe was fired', data)
    //- })
    //- observer.broadcast({someData: 'hello'})

    const blogObserver = new EventObserver()

      const textField = document.querySelector('.textField')
      const countField = document.querySelector('.countField')

      const getWordsCount = text =>
        text ? text.trim().split(/\s+/).length : 0

      blogObserver.subscribe(text => {
        //- console.log('broadcast catched', text)
        countField.innerHTML = getWordsCount(text)
      })

      textField.addEventListener('keyup', () => {
        blogObserver.broadcast(textField.value)
      })

      console.log(blogObserver.observers)
